#!/usr/bin/env python
"""Read the necessary xml files from the postprocessing configuration system and translate
them into bash scripts for batch submission of postprocessing tasks. 

Arguments:
caseroot (mandatory) - full path to a CESM case

Creates files: 
$CASEROOT/env_postprocess.xml
$CASEROOT/env_timeseries.xml
$CASEROOT/env_ilamb.xml
$CASEROOT/env_diags_atm.xml
$CASEROOT/env_diags_ice.xml
$CASEROOT/env_diags_lnd.xml
$CASEROOT/env_diags_ocn.xml
$CASEROOT/timeseries
$CASEROOT/$COMP_averages
$CASEROOT/$COMP_diagnostics
__________________________
Created on April, 2015

Author: CSEG <cseg@cgd.ucar.edu>
"""

from __future__ import print_function

import sys

# check the system python version and require 2.7.x or greater
if sys.hexversion < 0x02070000:
    print(70 * "*")
    print("ERROR: {0} requires python >= 2.7.x. ".format(sys.argv[0]))
    print("It appears that you are running python {0}".format(
            ".".join(str(x) for x in sys.version_info[0:3])))
    print(70 * "*")
    sys.exit(1)

#
# built-in modules
#
import argparse
import collections
import errno
import os
import platform
import pprint
from operator import itemgetter
import re
import shutil
import subprocess
import traceback


#
# installed dependencies
#
try:
    import lxml.etree as etree
except:
    import xml.etree.ElementTree as etree

if sys.version_info[0] == 2:
    from ConfigParser import SafeConfigParser as config_parser
else:
    from configparser import ConfigParser as config_parser

#
# activate the virtual environment that was created by create_python_env
#
if ( not os.path.isfile('./cesm-env2/bin/activate_this.py') ):
    err_msg = ('create_postprocess ERROR: the virtual environment cesm-env2 does not exist.' \
               ' Please run $POSTPROCESSING_PATH/create_python_env -cimeroot [path to CIME root directory] -machine [machine name]')
    raise OSError(err_msg)

execfile('./cesm-env2/bin/activate_this.py', dict(__file__='./cesm-env2/bin/activate_this.py'))

#
# import modules installed in the virtual environment
#
from cesm_utils import cesmEnvLib
import jinja2

# -------------------------------------------------------------------------------
# define a class to be used for the xml entry, id, desc values
# -------------------------------------------------------------------------------
class XmlEntry(object):
    def __init__(self, id, value, desc):
        self._id = id
        self._value = value
        self._desc = desc
    
    def id(self):
        return self._id
    
    def value(self):
        return self._value

    def desc(self):
        return self._desc

# -------------------------------------------------------------------------------
# commandline_options - parse any command line options
# -------------------------------------------------------------------------------

def commandline_options():
    """Process the command line arguments.

    """
    parser = argparse.ArgumentParser(
        description='Read the necessary XML files from the postprocessing configuration system and translate them into bash scripts for batch submission of postprocessing tasks. Runtime options can be set in the XML files in the caseroot.')

    parser.add_argument('-backtrace', '--backtrace', action='store_true',
                        help='show exception backtraces as extra debugging '
                        'output')

    parser.add_argument('-debug', '--debug', nargs=1, required=False, type=int, default=0,
                        help='debugging verbosity level output: 0 = none, 1 = minimum, 2 = maximum. 0 is default')

    parser.add_argument('-caseroot', '--caseroot', nargs=1, required=True, 
                        help='fully quailfied path to case root directory')

    parser.add_argument('-cesmtag', '--cesmtag', nargs=1, required=False,
                        help='CESM repository tag')

    options = parser.parse_args()
        
    return options


# -------------------------------------------------------------------------------
# check_standalone - read the env_postprocess.xml, if it exists, and check for
# the STANDALONE xml entry
# -------------------------------------------------------------------------------
def check_standalone(caseroot):
    """read the postprocess.xml, if it exists, and check for
    the STANDALONE xml entry
    
    Arguments:
    caseroot (string) - caseroot directory path
    
    Returns:
    standalone (boolean) - indicate if caseroot is standalone or not
    """

    configFile = '{0}/env_postprocess.xml'.format(caseroot)
    rc, err_msg = cesmEnvLib.checkFile(configFile, 'read')
    standalone = False

    if rc:
        xml_tree = etree.ElementTree()
        xml_tree.parse(configFile)
        for entry_tag in xml_tree.findall('entry'):
            if (entry_tag.get('id') == 'STANDALONE' and entry_tag.get('value').lower() == 'true'):
                standalone = True

    return standalone

# -------------------------------------------------------------------------------
# create_env_file - generate the XML file
# -------------------------------------------------------------------------------
def create_env_file(envDict, configFile, tmplFile, envFile, obs_root, comp, standalone):
    """create the XML file in the CASEROOT
    
    Arguments:
    envDict (dictionary) - environment dictionary
    configFile (string) - full path to input config_[definition].xml file
    tmplFile (string) - template file for output [file].xml
    envFile (string) - output [file].xml name
    obs_root (string) - observation data file root directory
    comp (string) - component
    standalone (boolean) - indicate if this is postprocessing for a standalone case
    
    """
    group_list = list()
    sorted_group_list = list()
    rc, err_msg = cesmEnvLib.checkFile(configFile, 'read')
    if not rc:
        raise OSError(err_msg)

    rc, err_msg = cesmEnvLib.checkFile('{0}/Templates/{1}'.format(envDict['POSTPROCESS_PATH'], tmplFile), 'read')
    if not rc:
        raise OSError(err_msg)

    xml_tree = etree.ElementTree()
    #print ('creating configFile = {0}'.format(configFile))
    xml_tree.parse(configFile)
    
    for group_tag in xml_tree.findall('./groups/group'):
        xml_list = list()
        group_dict = dict()
        name = group_tag.get('name')
        order = int(group_tag.find('order').text)
        comment = group_tag.find('comment').text
        
        for entry_tag in group_tag.findall('entry'):
            # check if the value needs to be inherited from the envDict
            if entry_tag.get('value') == 'inherit':
                xml_list.append(XmlEntry(entry_tag.get('id'), envDict[entry_tag.get('id')], entry_tag.get('desc')))
            else:
                xml_list.append(XmlEntry(entry_tag.get('id'), entry_tag.get('value'), entry_tag.get('desc')))
                    
        group_dict = { 'order' : order, 'name' : name, 'comment' : comment, 'xml_list' : xml_list }
        group_list.append(group_dict)

    sorted_group_list = sorted(group_list, key=itemgetter('order'))

    # add an additional entry for machine dependent input observation files root path
    xml_list = list()
    if obs_root:
        if len(obs_root) > 0:
            xml_obs = XmlEntry('{0}DIAG_DIAGOBSROOT'.format(comp.upper()), 
                               obs_root, 
                               'Machine dependent diagnostics observation files root path')
            xml_list.append(xml_obs)
        
    # the xml_list now contains a list of XmlEntry classes that can be written to the template
    templateLoader = jinja2.FileSystemLoader( searchpath='{0}/Templates'.format(envDict['POSTPROCESS_PATH']) )
    templateEnv = jinja2.Environment( loader=templateLoader )

    template = templateEnv.get_template( tmplFile )
    templateVars = { 'xml_list' : xml_list,
                     'group_list' : sorted_group_list,
                     'standalone' : standalone }
        
    # render the template
    env_tmpl = template.render( templateVars )

    # write the env_file
    with open( envFile, 'w') as xml:
        xml.write(env_tmpl)

# -------------------------------------------------------------------------------
# read_machine_xml
# -------------------------------------------------------------------------------
def read_machine_xml(machineName, xmlFile):
    """ read_machine_xml - read the xmlFile with specified machine pe 
    counts for postprocessing tasks.

    Arguments:
    machine (string) - machine name
    xmlFile (string) - XML file containing machine pe layout for postprocessing

    Return:
    machine (dictionary) - dictionary with machine specific settings read from the XML file
    """
    machine = dict()
    machine['modules'] = []
    machine['reset_modules'] = []
    found = False
    rc, err_msg = cesmEnvLib.checkFile(xmlFile, 'read')
    if not rc:    
        raise OSError(err_msg)

    xml_tree = etree.ElementTree()
    xml_tree.parse(xmlFile)

    # find the matching machine name
    for xmlmachine in xml_tree.findall('machine'):
        if machineName.lower() == xmlmachine.get('name').lower():

            found = True
            # get the timeseries pes first
            tseries_pes = xmlmachine.find('timeseries_pes')
            machine['timeseries_pes'] = tseries_pes.text
            machine['timeseries_queue'] = tseries_pes.get('queue').lower()
            machine['timeseries_ppn'] = tseries_pes.get('pes_per_node').lower()
            machine['timeseries_wallclock'] = tseries_pes.get('wallclock').lower()

            # get the ilamb pes
            ilamb_pes = xmlmachine.find('ilamb_pes')
            machine['ilamb_pes'] = ilamb_pes.text
            machine['ilamb_queue'] = ilamb_pes.get('queue').lower()
            machine['ilamb_ppn'] = ilamb_pes.get('pes_per_node').lower()
            machine['ilamb_wallclock'] = ilamb_pes.get('wallclock').lower()

            # get the mpi run command
            machine['mpi_command'] = xmlmachine.find('mpi_command').text

            # get the pythonpath command
            machine['pythonpath'] = xmlmachine.find('pythonpath').text
            if machine['pythonpath'] is None:
                machine['pythonpath'] = ''

            # get the project from the XML first then override with env setting
            machine['project'] = xmlmachine.find('project').text
            if os.getenv('PROJECT') is not None:
                machine['project'] = os.getenv('PROJECT')

            # loop through the reset_module list
            for mod in xmlmachine.findall("reset_modules/module"):
                machine['reset_modules'].append(mod.text)

            # loop through the module list
            for mod in xmlmachine.findall("modules/module"):
                machine['modules'].append(mod.text)

            # loop through the compList to get the component PE layouts
            # and observation data root
            for comp in xmlmachine.findall("components/component"):
                compName = comp.get("name").lower()

                avg = comp.find('averages_pes')
                machine['{0}_averages_pes'.format(compName)] = avg.text
                machine['{0}_averages_queue'.format(compName)] = avg.get('queue').lower()
                machine['{0}_averages_ppn'.format(compName)] = avg.get('pes_per_node').lower()
                machine['{0}_averages_wallclock'.format(compName)] = avg.get('wallclock').lower()

                diags = comp.find('diagnostics_pes')
                machine['{0}_diagnostics_pes'.format(compName)] = diags.text
                machine['{0}_diagnostics_queue'.format(compName)] = diags.get('queue').lower()
                machine['{0}_diagnostics_ppn'.format(compName)] = diags.get('pes_per_node').lower()
                machine['{0}_diagnostics_wallclock'.format(compName)] = diags.get('wallclock').lower()

                regrid = comp.find('regrid_pes')
                if regrid is not None:
                    machine['{0}_regrid_pes'.format(compName)] = regrid.text
                    machine['{0}_regrid_queue'.format(compName)] = regrid.get('queue').lower()
                    machine['{0}_regrid_ppn'.format(compName)] = regrid.get('pes_per_node').lower()
                    machine['{0}_regrid_wallclock'.format(compName)] = regrid.get('wallclock').lower()
                        
                machine['{0}_obs_root'.format(compName)] = comp.find('obs_root').text

    if not found:
        err_msg = ('create_postprocess ERROR: Invalid machine "{0}" requested for postprocessing'.format(machine))
        raise OSError(err_msg)

    return machine

# -------------------------------------------------------------------------------
# create_batch - create the batch files for post processing submission
# -------------------------------------------------------------------------------
def create_batch(ppDir, pes, batchTmpl, runTmpl, postProcessCmd, mpiCmd, outFile, processName,
                 project, pythonpath, caseRoot, reset_modules, modules, queue, ppn, wallclock, 
                 options, standalone, ilamb=False):
    """create the batch submission files for post processing

    Arguments:
    ppDir (string) - postprocessing directory
    pes (integer) - number or PEs for post processing 
    batchTmpl (string) - machine dependent batch template file name 
    runTmpl (string) - run script template file 
    postProcessCmd (string) - post process command
    mpiCmd (string) - mpi run command
    outFile (string) - full path to output file for batch script
    processName (string) - post processing name for batch submission
    project (string) - project account number
    caseRoot (string) - case root directory path
    reset_modules (string) - module commands
    modules (string) - module commands
    queue (string) - queue for batch submission
    options (object) - commandline options
    standalone (boolean) - indicate if this is postprocessing for a standalone case
    """
    # first check if outFile already exists, if so delete and recreate
    rc, err_msg = cesmEnvLib.checkFile(outFile, 'read')
    if rc:
        os.unlink(outFile)

    # check if template files exist and are readable
    rc, err_msg = cesmEnvLib.checkFile('{0}/Templates/{1}'.format(ppDir, batchTmpl), 'read')
    if not rc:
        raise OSError(err_msg)

    rc, err_msg = cesmEnvLib.checkFile('{0}/Templates/{1}'.format(ppDir, runTmpl), 'read')
    if not rc:
        raise OSError(err_msg)

    if ilamb:
        virtualEnvDir = '{0}/ilamb_env/ilamb_env'.format(ppDir)
    else:
        virtualEnvDir = '{0}/cesm-env2/bin'.format(ppDir)
    # check that the postProcessCmd exists in the virtualenv
    if ilamb:
        rc, err_msg = cesmEnvLib.checkFile('{0}/bin/{1}'.format(virtualEnvDir, postProcessCmd), 'read')
    else:
        rc, err_msg = cesmEnvLib.checkFile('{0}/{1}'.format(virtualEnvDir, postProcessCmd), 'read')
    if not rc:
        raise OSError(err_msg)

    debug = '--debug 0'
    if options.debug:
        debug = '--debug {0}'.format(options.debug[0])

    backtrace = ''
    if options.backtrace:
        backtrace = '--backtrace'

    # all files look good so start parsing the template file starting with the batchTmpl
    templateLoader = jinja2.FileSystemLoader( searchpath='{0}/Templates'.format(ppDir) )
    templateEnv = jinja2.Environment( loader=templateLoader )
    template = templateEnv.get_template( batchTmpl )
    templateVars = { 'pes' : pes,
                     'queue' : queue,
                     'processName' : processName,
                     'project' : project,
                     'ppn' : ppn,
                     'wallclock' : wallclock }
        
    # render this template into the batchdirectives string
    batchdirectives = template.render( templateVars )

    # get the postprocessing run template 
    template = templateEnv.get_template( runTmpl )
    templateVars = { 'batchdirectives' : batchdirectives,
                     'reset_modules' : reset_modules,
                     'modules' : modules,
                     'pes' : pes,
                     'mpirun' : mpiCmd,
                     'pythonpath': pythonpath,
                     'processName' : processName,
                     'postProcessCmd' : postProcessCmd,
                     'caseRoot' : caseRoot,
                     'virtualEnvDir' : virtualEnvDir,
                     'debug' : debug,
                     'backtrace' : backtrace,
                     'standalone' : standalone }

    # render this template into the runScript string
    runScript = template.render( templateVars )

    # write the runScript to the outFile
    with open( outFile, 'w') as fh:
        fh.write(runScript)

    # make runScript permission executable
    try:
        subprocess.check_call( ['chmod', '+x', outFile ] )
    except subprocess.CalledProcessError as e:
        print('create_postprocess: {0} could not be made executable'.format(outFile))
        print('WARNING: manually add execute permission to {0}'.format(outFile))
        print('    {0} - {1}'.format(e.cmd, e.output))


# -------------------------------------------------------------------------------
# initialize_main - initialization from main
# -------------------------------------------------------------------------------
def initialize_main(envDict, options, standalone):
    """initialize_main - initialize main settings
    
    Arguments:
    options (list) - input options from command line
    envDict (dictionary) - environment dictionary
    standalone (boolean) - indicate if this is postprocessing for a standalone case

    Return:
    envDict (dictionary) - environment dictionary
    """
    # CASEROOT is given on the command line as required option --caseroot
    caseroot = options.caseroot[0]
    pp = envDict['POSTPROCESS_PATH']

    if not standalone:
        # run xmlquery to get the variables needed for postprocessing
        os.chdir(caseroot)
        var_names = ['CASE', 'DOUT_S_ROOT', 'ATM_GRID', 'ICE_GRID', 'LND_GRID', 'OCN_GRID', 'ICE_NX', 'ICE_NY']
        for var_name in var_names:
            cmd = ['./xmlquery {0} -value'.format(var_name)]
            try:
                pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                output, err = pipe.communicate()
            except OSError as e:
                print('WARNING',e.errno,e.strerror)
            envDict[var_name] = output
        os.chdir(pp)
    else:
        caseList = caseroot.split('/')
        envDict['CASE'] = caseList[-1]
        var_names = ['DOUT_S_ROOT', 'ATM_GRID', 'ICE_GRID', 'LND_GRID', 'OCN_GRID', 'ICE_NX', 'ICE_NY']
        for var_name in var_names:
            envDict[var_name] = 'undefined'

    # refer to the caseroot that was specified on the command line instead of what
    # is read in the environment as the caseroot may have changed from what is listed
    # in the env xml
    envDict['CASEROOT'] = caseroot
    envDict['POSTPROCESS_PATH'] = pp

    envDict['CESM_TAG'] = 'undefined'
    if options.cesmtag:
        envDict['CESM_TAG'] = options.cesmtag[0]

    return envDict

# -------------------------------------------------------------------------------
# main
# -------------------------------------------------------------------------------
def main(options):
    """ main

    Arguments:
    options (list) - input options from command line
    """
    envDict = dict()

    # set the postprocessing dir in the envDict
    envDict['POSTPROCESS_PATH'] = os.getcwd()

    # create the postprocess directories in the caseroot
    standalone = check_standalone(options.caseroot[0])

    # check to make sure CASEROOT is a valid, readable directory
    if not os.path.isdir(options.caseroot[0]):
        # stand-alone caseroot
        standalone = True
        pp_case_path = options.caseroot[0]
        log_path = '{0}/logs'.format(pp_case_path)
        web_dirs = '{0}/web_dirs'.format(pp_case_path)
    else:
        pp_case_path = '{0}/postprocess'.format(options.caseroot[0])
        log_path = '{0}/logs'.format(pp_case_path)
        web_dirs = '{0}/web_dirs'.format(pp_case_path)

    # make the appropriate dirs in the caseroot
    try:
        os.mkdir(pp_case_path)
    except:
        raise OSError('create_postprocess ERROR: cannot create directory {0}. Exiting...'.format(pp_case_path))
    try:
        os.mkdir(log_path)
    except:
        raise OSError('create_postprocess ERROR: cannot create directory {0}. Exiting...'.format(log_path))
    try:
        os.mkdir(web_dirs)
        shutil.copy2('{0}/Config/README.web_dirs'.format(envDict['POSTPROCESS_PATH']), 
                     '{0}/README.web_dirs'.format(web_dirs))
    except:
        raise OSError('create_postprocess ERROR: cannot create directory {0}. Exiting...'.format(web_dirs))


    # initialize the environment dictionary
    envDict = initialize_main(envDict, options, standalone)
    envDict['PP_CASE_PATH'] = pp_case_path

    # get the machine name from the hostname
    hostname = cesmEnvLib.get_hostname()
    envDict['MACH'] = cesmEnvLib.get_machine_name(hostname, '{0}/Machines/machine_postprocess.xml'.format(envDict['POSTPROCESS_PATH']))

    # TODO - need to check the compset to see what is active 
    # and return the compList accordingly, for now create all options

    # set the list of components
    compList = ['atm','ice','lnd','ocn']
#    regridList = ['atm','lnd']
    regridList = ['lnd']

    # get the machine dependent variables, modules and mpi run command in a dictionary
    machine = dict()
    machine = read_machine_xml(envDict['MACH'], '{0}/Machines/machine_postprocess.xml'.format(envDict['POSTPROCESS_PATH']))

    # generate the env_postprocess.xml file
    config_file = '{0}/Config/config_postprocess.xml'.format(envDict['POSTPROCESS_PATH'])
    tmpl_file = 'env_postprocess.tmpl'
    env_file = '{0}/env_postprocess.xml'.format(envDict['PP_CASE_PATH'])
    create_env_file(envDict, config_file, tmpl_file, env_file, '', '', standalone)

    # generate the env_timeseries.xml file
    config_file = '{0}/Config/config_timeseries.xml'.format(envDict['POSTPROCESS_PATH'])
    env_file = '{0}/env_timeseries.xml'.format(envDict['PP_CASE_PATH'])
    shutil.copy2(config_file, env_file)

    # generate the env_ilamb.xml file
    config_file = '{0}/Config/config_ilamb.xml'.format(envDict['POSTPROCESS_PATH'])
    env_file = '{0}/env_ilamb.xml'.format(envDict['PP_CASE_PATH'])
    shutil.copy2(config_file, env_file)

    # generate the env_diags_[component].xml files
    for comp in compList:
        config_file = '{0}/diagnostics/diagnostics/{1}/Config/config_diags_{1}.xml'.format(envDict['POSTPROCESS_PATH'], comp)
        tmpl_file = 'env_diags.tmpl'
        env_file = '{0}/env_diags_{1}.xml'.format(envDict['PP_CASE_PATH'], comp)
        create_env_file(envDict, config_file, tmpl_file, env_file, machine['{0}_obs_root'.format(comp)], comp, standalone)

    # define the template files for the batch scripts
    batch_tmpl = 'batch_{0}.tmpl'.format(envDict['MACH'])
    run_tmpl = 'postprocess.tmpl'

    # generate the timeseries batch submit script from template files
    postProcessCmd = 'cesm_tseries_generator.py'
    processName = 'timeseries'
    outFile = '{0}/{1}'.format(envDict['PP_CASE_PATH'],processName)

    create_batch(envDict['POSTPROCESS_PATH'], machine['timeseries_pes'], batch_tmpl, run_tmpl, postProcessCmd, 
                 machine['mpi_command'], outFile, processName, machine['project'], machine['pythonpath'], 
                 envDict['PP_CASE_PATH'], machine['reset_modules'], machine['modules'], machine['timeseries_queue'], 
                 machine['timeseries_ppn'], machine['timeseries_wallclock'], options, standalone)

    # generate the ilamb batch submit script from template files
    postProcessCmd = 'cesm_ilamb_generator.py'
    processName = 'ilamb'
    outFile = '{0}/{1}'.format(envDict['PP_CASE_PATH'],processName)

    create_batch(envDict['POSTPROCESS_PATH'], machine['ilamb_pes'], batch_tmpl, 'postprocess_ilamb.tmpl', postProcessCmd,
                 machine['mpi_command'], outFile, processName, machine['project'], machine['pythonpath'],
                 envDict['PP_CASE_PATH'], machine['reset_modules'], [], machine['ilamb_queue'],
                 machine['ilamb_ppn'], machine['ilamb_wallclock'], options, standalone, ilamb=True)

    # generate the diagnostics batch submit scripts from template files
    for comp in compList:
        # generate the averages batch submit script
        postProcessCmd = '{0}_avg_generator.py'.format(comp)
        processName = '{0}_averages'.format(comp)
        outFile = '{0}/{1}'.format(envDict['PP_CASE_PATH'], processName)
        create_batch(envDict['POSTPROCESS_PATH'], machine['{0}_averages_pes'.format(comp)], batch_tmpl, run_tmpl, postProcessCmd, 
                     machine['mpi_command'], outFile, processName, machine['project'], machine['pythonpath'], 
                     envDict['PP_CASE_PATH'], machine['reset_modules'], machine['modules'], machine['{0}_averages_queue'.format(comp)], 
                     machine['{0}_averages_ppn'.format(comp)], machine['{0}_averages_wallclock'.format(comp)], options, standalone)

        # generate the diagnostics batch submit script
        postProcessCmd = '{0}_diags_generator.py'.format(comp)
        processName = '{0}_diagnostics'.format(comp)
        outFile = '{0}/{1}'.format(envDict['PP_CASE_PATH'], processName)
        create_batch(envDict['POSTPROCESS_PATH'], machine['{0}_diagnostics_pes'.format(comp)], batch_tmpl, run_tmpl, postProcessCmd, 
                     machine['mpi_command'], outFile, processName, machine['project'], machine['pythonpath'], 
                     envDict['PP_CASE_PATH'],  machine['reset_modules'], machine['modules'], machine['{0}_diagnostics_queue'.format(comp)],
                     machine['{0}_diagnostics_ppn'.format(comp)], machine['{0}_diagnostics_wallclock'.format(comp)], options, standalone)

    # generate the regrid batch submit scripts from template files
    for comp in regridList:
        # generate the regrid batch submit script
        postProcessCmd = '{0}_regrid_generator.py'.format(comp)
        processName = '{0}_regrid'.format(comp)
        outFile = '{0}/{1}'.format(envDict['PP_CASE_PATH'], processName)
        create_batch(envDict['POSTPROCESS_PATH'], machine['{0}_regrid_pes'.format(comp)], batch_tmpl, run_tmpl, postProcessCmd, 
                     machine['mpi_command'], outFile, processName, machine['project'], machine['pythonpath'], 
                     envDict['PP_CASE_PATH'],  machine['reset_modules'], machine['modules'], machine['{0}_regrid_queue'.format(comp)], 
                     machine['{0}_regrid_ppn'.format(comp)], machine['{0}_regrid_wallclock'.format(comp)], options, standalone)

    # copy some tools to the PP_CASE_PATH
    files_to_copy = ['copy_html', 'pp_config', 'create_env_script', 'env_file.xsd']
    for file_to_copy in files_to_copy:
        shutil.copy2('{0}/Tools/{1}'.format(envDict['POSTPROCESS_PATH'], file_to_copy), 
                     '{0}/{1}'.format(envDict['PP_CASE_PATH'], file_to_copy))

    print('*****************************************************************************************')
    print('')
    print('SUCCESS!')
    print(' The CASEROOT postprocess directory {0}'.format(envDict['PP_CASE_PATH']))
    print(' now contains all the necessary post-processing submit scripts and associated')
    print(' XML configuration files. Please review the on-line documentation at')
    print(' http://github.com/NCAR/CESM_postprocessing/wiki for a complete description of how')
    print(' to configure and use the CESM post-processing tools.')
    if standalone:
        print(' NOTICE: The env_postprocess.xml file in the new CASEROOT postprocess directory will need to be updated.')
    print('')
    print('*****************************************************************************************')
    
    
#===================================

if __name__ == "__main__":
    options = commandline_options()
    try:
        status = main(options)
        sys.exit(status)
    except Exception as error:
        print(str(error))
        if options.backtrace:
            traceback.print_exc()
        sys.exit(1)
