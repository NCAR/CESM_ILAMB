#!/usr/bin/env python

from __future__ import print_function

import sys

# check the system python version and require 2.7.x or greater
if sys.hexversion < 0x02070000:
    print(70 * "*")
    print("ERROR: {0} requires python >= 2.7.x. ".format(sys.argv[0]))
    print("It appears that you are running python {0}".format(
            ".".join(str(x) for x in sys.version_info[0:3])))
    print(70 * "*")
    sys.exit(1)

#
# built-in modules
#
import argparse
import collections
import datetime
import errno
import glob
import os
import platform
import pprint
import re
import shutil
import subprocess
import traceback

try:
    import lxml.etree as etree
except:
    import xml.etree.ElementTree as etree

# get the postprocess virtualenv path from the env_postprocess.xml file
env_file = './env_postprocess.xml'
postprocess_path = ''
standalone = ''
if os.path.isfile(env_file):
    xml_tree = etree.ElementTree()
    xml_tree.parse(env_file)
    for entry_tag in xml_tree.findall('entry'):
        if entry_tag.get('id') == 'POSTPROCESS_PATH':
            postprocess_path = entry_tag.get('value')
        if entry_tag.get('id') == 'STANDALONE':
            standalone = entry_tag.get('value')
else:
    err_msg = ('copy_html ERROR: env_postprocess.xml does not exist in this directory.')
    raise OSError(err_msg)

# check if virtualenv is activated
if hasattr(sys, 'real_prefix'):
    try:
        import cesm_utils
    except:
        #
        # activate the virtual environment that was created by create_python_env.sh
        #
        activate_file = '{0}/cesm-env2/bin/activate_this.py'.format(postprocess_path)
        if not os.path.isfile(activate_file):
            err_msg = ('copy_html ERROR: the virtual environment in {0} does not exist.'.format(postprocess_path) \
                          + 'Please run {0}/create_python_env.sh -cimeroot [cimeroot] -machine [machine name]'.format(postprocess_path))
            raise OSError(err_msg)

        try:
            execfile(activate_file, dict(__file__=activate_file))
        except:
            raise OSError('copy_html ERROR: Unable to activate python virtualenv {0}'.format(activate_file))
else:
    #
    # activate the virtual environment that was created by create_python_env.sh
    #
    activate_file = '{0}/cesm-env2/bin/activate_this.py'.format(postprocess_path)
    if not os.path.isfile(activate_file):
             err_msg = ('copy_html ERROR: the virtual environment in {0} does not exist.'.format(postprocess_path) \
                           + 'Please run {0}/create_python_env.sh -cimeroot [cimeroot] -machine [machine name]'.format(postprocess_path))
             raise OSError(err_msg)

    try:
        execfile(activate_file, dict(__file__=activate_file))
    except:
        raise OSError('copy_html ERROR: Unable to activate python virtualenv {0}'.format(activate_file))

if sys.version_info[0] == 2:
    from ConfigParser import SafeConfigParser as config_parser
else:
    from configparser import ConfigParser as config_parser

#
# import modules installed in the virtual environment
#
from cesm_utils import cesmEnvLib
import jinja2

#=======================================================================
# commandline_options - parse any command line options
#=======================================================================

def commandline_options():
    """Process the command line arguments.

    """
    parser = argparse.ArgumentParser(
        description='Read the necessary XML files from the caseroot postprocessing configuration and secure copy the html files and diagnostics plot files to a remote webserver.')

    parser.add_argument('-backtrace', '--backtrace', action='store_true',
                        help='show exception backtraces as extra debugging '
                        'output')

    parser.add_argument('-debug', '--debug', nargs=1, required=False, type=int, default=0,
                        help='debugging verbosity level output: 0 = none, 1 = minimum, 2 = maximum. 0 is default')

    options = parser.parse_args()
        
    return options


#=======================================================================
# get_years
#=======================================================================
def get_years(env, comp):
    """ get_years - get the start and stop years for diagnostics based on component
    
    Arguments:
    env (dict) - dictionary of env variables
    comp (string) - component name

    Return:
    model_start_year (string) - model start year for diagnostics
    model_stop_year (string) - model stop year for diagnostics
    control_start_year (string) - control start year for diagnostics
    control_stop_year (string) - control stop year for diagnostics
    trends_start_year1 (string) - model trends start year for diagnostics
    trends_stop_year1 (string) - model trends stop year for diagnostics
    trends_start_year2 (string) - control trends start year for diagnostics
    trends_stop_year2 (string) - control trends stop year for diagnostics
    """

    # define component-year mapping for model
    comp_lookup = {'atm' : {'start_year':'ATMDIAG_test_first_yr', 'num_years':'ATMDIAG_test_nyrs'},
                   'ice' : {'start_year':'ICEDIAG_BEGYR_CONT', 'stop_year':'ICEDIAG_ENDYR_CONT'},
                   'lnd' : {'start_year':'LNDDIAG_clim_first_yr_1', 'num_years':'LNDDIAG_clim_num_yrs_1'},
                   'ocn' : {'start_year':'OCNDIAG_YEAR0', 'stop_year':'OCNDIAG_YEAR1'}}

    # define component-year mapping for control
    comp_lookup_control = {'atm' : {'start_year':'ATMDIAG_cntl_first_yr', 'num_years':'ATMDIAG_cntl_nyrs'},
                           'ice' : {'start_year':'ICEDIAG_BEGYR_DIFF', 'stop_year':'ICEDIAG_ENDYR_DIFF'},
                           'lnd' : {'start_year':'LNDDIAG_clim_first_yr_2', 'num_years':'LNDDIAG_clim_num_yrs_2'},
                           'ocn' : {'start_year':'OCNDIAG_CNTRLYEAR0', 'stop_year':'OCNDIAG_CNTRLYEAR1'}}

    # define component-year mapping for trends and timeseries
    comp_lookup_trends = {'atm' : {},
                          'ice' : {},
                          'lnd' : {'start_year1':'LNDDIAG_trends_first_yr_1', 'num_years1':'LNDDIAG_trends_num_yrs_1',
                                   'start_year2':'LNDDIAG_trends_first_yr_2', 'num_years2':'LNDDIAG_trends_num_yrs_2'},
                          'ocn' : {'start_year':'OCNDIAG_TSERIES_YEAR0', 'stop_year':'OCNDIAG_TSERIES_YEAR1'}}

    # get the model years
    comp_data = comp_lookup[comp]
    model_start_year = '{0}'.format(env[comp_data['start_year']])
    if comp_data.has_key('num_years'):
        model_stop_year = '{0}'.format(int(model_start_year) + int(env[comp_data['num_years']]))
    else:
        model_stop_year = '{0}'.format(env[comp_data['stop_year']])

    # get the control years
    comp_data = comp_lookup_control[comp]
    control_start_year = '{0}'.format(env[comp_data['start_year']])
    if comp_data.has_key('num_years'):
        control_stop_year = '{0}'.format(int(control_start_year) + int(env[comp_data['num_years']]))
    else:
        control_stop_year = '{0}'.format(env[comp_data['stop_year']])

    # get the trends years
    comp_data = comp_lookup_trends[comp]
    trends_start_year1 = trends_stop_year1 = trends_start_year2 = trends_stop_year2 = None
    if comp == 'ocn':
        trends_start_year1 = '{0}'.format(env[comp_data['start_year']])
        trends_stop_year1 = '{0}'.format(env[comp_data['stop_year']])
    elif comp == 'lnd':
        trends_start_year1 = '{0}'.format(env[comp_data['start_year1']])
        trends_stop_year1 = '{0}'.format(int(trends_start_year1) + int(env[comp_data['num_years1']]))
        trends_start_year2 = '{0}'.format(env[comp_data['start_year2']])
        trends_stop_year2 = '{0}'.format(int(trends_start_year2) + int(env[comp_data['num_years2']]))

    return model_start_year, model_stop_year, control_start_year, control_stop_year, \
        trends_start_year1, trends_stop_year1, trends_start_year2, trends_stop_year2 


#=======================================================================
# check_ssh_key
#=======================================================================
def check_ssh_key(env):

    # check if ssh key is set for passwordless access to the web host
    try:
        output = subprocess.check_output( "ssh -oNumberOfPasswordPrompts=0 {0}@{1} 'echo hello'".format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST']), 
                                 stderr=subprocess.STDOUT,
                                 shell=True)
    except subprocess.CalledProcessError as e:
        print('WARNING: unable to connect to remote web host {0}@{1} without a password'.format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST']))
        print('    You will be prompted for a password in order to copy the files')


#=======================================================================
# create_top_level
#=======================================================================
def create_top_level(env, comp):

    # make sure top level remote directory exists
    try:
        pipe = subprocess.Popen( ["ssh {0}@{1} 'mkdir -p {2}/{3}'".format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR'],comp)], env=env, shell=True)
        pipe.wait()
    except OSEerror as e:
        print('ERROR: unable to create remote directory {0}@{1}:{2}/{3}'.format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR'],comp))
        print('    {0} - {1}'.format(e.errno, e.strerror))
        sys.exit(1)

    # create the logos subdir
    try:
        pipe = subprocess.Popen( ["ssh {0}@{1} 'mkdir -p {2}/logos'".format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR'])], env=env, shell=True)
        pipe.wait()
    except OSEerror as e:
        print('ERROR: unable to create remote directory {0}@{1}:{2}/logos'.format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR']))
        print('    {0} - {1}'.format(e.errno, e.strerror))
        sys.exit(1)


#=======================================================================
# scp_files - scp files to a remote server
#=======================================================================
def scp_files(env, local, remote):

    try:
        pipe = subprocess.Popen( ['scp -r {0} {1}'.format(local, remote)], env=env, shell=True)
        pipe.wait()
        return True
    except OSError as e:
        print('copy_html WARNING: scp command failed with error:')
        print('    {0} - {1}'.format(e.errno, e.strerror))
        return False


#=======================================================================
# read_paths - get the paths from the web_dirs files
#=======================================================================
def read_paths(env, comp_data):
    """ read the $PP_CASE_PATH/web_dirs files specified in the comp_data dictionary
        to get the path to the web directories."

    Arguments:
    env (dictionary) - environment dictionary
    comp_data (map) - component diag dir mapping
    """
    for diag_type, key in comp_data.iteritems():
        web_files = sorted(glob.glob('{0}/web_dirs/{1}.*'.format(env['PP_CASE_PATH'],key)))
        for web_file in web_files:
            newlines = list()
            lines = [line.rstrip('\n') for line in open(web_file,'r')]
            for line in lines:
                newline = line
                values = line.split(':')
                if 'copied' not in values[-1].lower():
                    env[values[-2]] = values[-1]
                    newline = '{0}:copied'.format(line)
                newlines.append(newline)

            with open(web_file, 'w') as f:
                f.write('\n'.join(newlines) + '\n')
            f.close()

    return env

#=======================================================================
# copy_files - scp files from workdir to remote directory 
#=======================================================================
def copy_files(env, comp, comp_data):
    """ copy html files from workdir to remote dir.
        Will prompt user if ssh keys are not set.

    Arguments:
    env (dictionary) - environment dictionary
    comp (string) - component 
    comp_data (map) - component diag dir mapping
    """
    remote = '{0}@{1}:{2}/{3}'.format(env['GLOBAL_WEBLOGIN'], env['GLOBAL_WEBHOST'], env['GLOBAL_REMOTE_WEBDIR'], comp)
    
    if comp != 'ocn':
        for diag_type, key in comp_data.iteritems():
            # check if the diag_type key string that points to the local webdir is empty or not
            if len(env[key]) > 0:
                local = env[key]
                if not os.path.isdir(local):
                    print('copy_html WARNING: local directory = {0} does not exists.'.format(local))
                else:
                    # copy local to remote
                    if not scp_files(env, local, remote):
                        print('copy_html WARNING: unable to copy {0} to {1}'.format(local, remote))
                        print('     You will need to copy the files manually')
    else:
        # ocean need to create a tar file first
        if os.path.isdir(env['OCNDIAG_WEBDIR']):
            ok_to_copy = True
            rootdir, workdir = os.path.split(env['OCNDIAG_WEBDIR'])

            # fix for when there is a / at the end of the path
            if len(workdir) == 0:
                rootdir, workdir = os.path.split(rootdir)

            tarfile = 'ocn{0}-{1}.tar.gz'.format(env['OCNDIAG_YEAR0'], env['OCNDIAG_YEAR1'])
            cwd = os.getcwd()
            os.chdir(rootdir)
            if os.path.isfile(os.path.join(rootdir,tarfile)):
                print('copy_html WARNING: ocean tar file = {0} already exists - please delete first.'.format(os.path.join(rootdir,tarfile)))
                ok_to_copy = False
            else:
                tar_cmd = "tar cvfz {0} --exclude='*.nc' --exclude='*.nc_tmp' --exclude='*.log.*' --exclude='*.asc' --exclude='*.ncl' --exclude='*.dt.*' {1}".format(tarfile, workdir)
                try:
                    pipe = subprocess.Popen([tar_cmd], env=env, shell=True)
                    pipe.wait()
                except OSError as e:
                    print('copy_html WARNING: unable to execute tar command {0}'.format(tar_cmd))
                    print('    You will need to copy the files in {0} manually to a web server.'.format(env['OCNDIAG_WEBDIR']))
                    print('    {0} - {1}'.format(e.returncode, e.output))
                    ok_to_copy = False
            if ok_to_copy:
                if scp_files(env, tarfile, remote):
                    # untar the file on remote server
                    ok_to_remove = True
                    try:
                        pipe = subprocess.Popen(["ssh {0}@{1} 'cd {2}/{3} ; tar xvfz {4}'".format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR'],comp,tarfile)], env=env, shell=True)
                        pipe.wait()
                    except OSError as e:
                        print('copy_html WARNING: unable to untar file {0} on remote server {1}@{2}:{3}/{4}'.format(tarfile, env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR'],comp))
                        print('   You will need to untar files manually')
                        ok_to_remove = False
                if ok_to_remove:
                    # remove the tar file on the remote server
                    try:
                        pipe = subprocess.Popen(["ssh {0}@{1} 'cd {2}/{3} ; rm {4}'".format(env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR'],comp,tarfile)], env=env, shell=True)
                        pipe.wait()
                    except OSError as e:
                        print('copy_html WARNING: unable to remove tar file {0} on remote server {1}@{2}:{3}/{4}'.format(tarfile, env['GLOBAL_WEBLOGIN'],env['GLOBAL_WEBHOST'],env['GLOBAL_REMOTE_WEBDIR'],comp))
            os.chdir(cwd)


#=======================================================================
# create a main index page and copy it over to the remote server top level
#=======================================================================
def create_index(env, compList, activeList, comp_lookup):
    """ create a main index.html page """

    comp_casenames = {'atm' : {'model':'ATMDIAG_test_casename', 'control':'ATMDIAG_cntl_casename'},
                      'ice' : {'model':'ICEDIAG_CASE_TO_CONT', 'control':'ICEDIAG_CASE_TO_DIFF'},
                      'lnd' : {'model':'LNDDIAG_caseid_1', 'control':'LNDDIAG_caseid_2'},
                      'ocn' : {'model':'CASE', 'control':'OCNDIAG_CNTRLCASE'}}

    diag_dict = dict()
    comp_data = dict()
    link_dict = dict()

    for comp in compList:
        if comp in activeList:
            # create a section for links to the active component
            (model_start_year, model_stop_year, control_start_year, control_stop_year, \
                trends_start_year1, trends_stop_year1, trends_start_year2, trends_stop_year2) = get_years(env, comp)
            # load up the diag_dict to be passed to the template with the case names and years
            comp_data = comp_casenames[comp]
            model = env[comp_data['model']]
            control = env[comp_data['control']]

            # load the diag dict with template variables
            diag_dict[comp] = {'model':model, 'model_start_year':model_start_year, 'model_stop_year':model_stop_year, \
                                   'trends_start_year1':trends_start_year1, 'trends_stop_year1':trends_stop_year1, \
                                   'control':control, 'control_start_year':control_start_year, 'control_stop_year':control_stop_year, \
                                   'trends_start_year2':trends_start_year2, 'trends_stop_year2':trends_stop_year2}

            # get the remote relative links
            comp_data = comp_lookup[comp]
            if comp in ['atm', 'lnd']:
                for diag_type, key in comp_data.iteritems():
                    if len(env[key]) > 0:
                        root, diag_path = os.path.split(env[key])
                        # fix for when there is a / at the end of the path
                        if len(diag_path) == 0:
                            root, diag_path = os.path.split(root)
                        local_diag_path = diag_path
                        if comp == 'lnd':
                            local_diag_path = '{0}/setsIndex.html'.format(diag_path)
                        link_dict[diag_type] = local_diag_path
                    else:
                        link_dict[diag_type] = None
                    diag_dict[comp].update(link_dict)

            elif comp == 'ice':
                for diag_type, key in comp_data.iteritems():
                    if len(env[key]) > 0:
                        root, diag_path = os.path.split(env[key])
                        # fix for when there is a / at the end of the path
                        if len(diag_path) == 0:
                            root, diag_path = os.path.split(root)
                        local_diag_path = '{0}/yrs{1}-{2}/'.format(diag_path, env['ICEDIAG_BEGYR_CONT'], env['ICEDIAG_ENDYR_CONT'])
                        link_dict[diag_type] = local_diag_path
                    else:
                        link_dict[diag_type] = None
                    diag_dict[comp].update(link_dict)

            elif comp == 'ocn':
                ocn_link_dict = dict()
                ocn_diag_types = {'OCNDIAG_MODEL_VS_OBS':('MODEL_VS_OBS','{0} (years {1}-{2}) - Observations'.format(model, model_start_year, model_stop_year)), \
                                      'OCNDIAG_MODEL_VS_OBS_ECOSYS':('MODEL_VS_OBS_ECOSYS','{0} (years {1}-{2}) - Observations w/ ecosystem'.format(model, model_start_year, model_stop_year)), \
                                      'OCNDIAG_MODEL_VS_CONTROL':('MODEL_VS_CONTROL_{0}'.format(control),'{0} (years {1}-{2}) - {3} (years {4}-{5})'.format(model, model_start_year, model_stop_year, control, control_start_year, control_stop_year)), \
                                      'OCNDIAG_MODEL_VS_CONTROL_ECOSYS':('MODEL_VS_CONTROL_ECOSYS_{0}'.format(control),'{0} (years {1}-{2}) - {3} (years {4}-{5}) w/ ecosystem'.format(model, model_start_year, model_stop_year, control, control_start_year, control_stop_year)), \
                                      'OCNDIAG_MODEL_TIMESERIES':('MODEL_TIMESERIES','{0} Timeseries (years {1}-{2})'.format(model, trends_start_year1, trends_stop_year1)), \
                                      'OCNDIAG_MODEL_TIMESERIES_ECOSYS':('MODEL_TIMESERIES_ECOSYS','{0} Timeseries w/ ecosystem (years {1}-{2})'.format(model, trends_start_year1, trends_stop_year1))}

                for diag_type, key in comp_data.iteritems():
                    if len(env[key]) > 0:
                        root, diag_path = os.path.split(env[key])
                        # fix for when there is a / at the end of the path
                        if len(diag_path) == 0:
                            root, diag_path = os.path.split(root)
                        for ocn_diag_type, link_list in ocn_diag_types.iteritems():
                            if env[ocn_diag_type].upper() in ['T','TRUE']:
                                local_diag_path = '{0}/{1}'.format(diag_path, link_list[0])
                                ocn_link_dict[ocn_diag_type] = (local_diag_path, link_list[1])
                            else:
                                ocn_link_dict[ocn_diag_type] = None
                    else:
                        ocn_link_dict[ocn_diag_type] = None
                    
    # create the jinja template
    templatePath = '{0}/Templates'.format(env['POSTPROCESS_PATH']) 

    templateLoader = jinja2.FileSystemLoader( searchpath=templatePath )
    templateEnv = jinja2.Environment( loader=templateLoader )
    
    template_file = 'diagnostics.tmpl'
    template = templateEnv.get_template( template_file )
    
    # get the current datatime string for the template
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # set the template variables
    templateVars = { 'casename' : env['CASE'],
                     'tagname' : env['CESM_TAG'],
                     'diag_dict' : collections.OrderedDict(sorted(diag_dict.items())),
                     'ocn_link_dict': ocn_link_dict,
                     'today': now,
                     }

    # write the main index.html page to the top working directory
    # TODO - check if an index page already exists and increment a count to create another one
    main_html = template.render( templateVars )
    workdir = '{0}/{1}'.format(env['PP_CASE_PATH'],'html_files')
    try:
        os.makedirs(workdir)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise
    with open( '{0}/index.html'.format(workdir), 'w') as index:
        index.write(main_html)

    # copy the and style sheet to the top level
    remote = '{0}@{1}:{2}'.format(env['GLOBAL_WEBLOGIN'], env['GLOBAL_WEBHOST'], env['GLOBAL_REMOTE_WEBDIR'])
    localdir = '{0}/Templates/'.format(env['POSTPROCESS_PATH'])

    local = '{0}/*.css'.format(localdir)
    try:
        pipe = subprocess.Popen( ['scp {0} {1}'.format(local, remote)], env=env, shell=True)
        pipe.wait()
    except OSError as e:
        print('copy_html WARNING: scp command failed with error::')
        print('    {0} - {1}'.format(e.errno, e.strerror))

    # copy the top-level index.html
    local = '{0}/index.html'.format(workdir)
    try:
        pipe = subprocess.Popen( ['scp {0} {1}'.format(local, remote)], env=env, shell=True)
        pipe.wait()
    except OSError as e:
        print('copy_html WARNING: scp command failed with error:')
        print('    {0} - {1}'.format(e.errno, e.strerror))

    # copy the logos to the sub-dir
    remote_logos = '{0}@{1}:{2}/logos'.format(env['GLOBAL_WEBLOGIN'], env['GLOBAL_WEBHOST'], env['GLOBAL_REMOTE_WEBDIR'])
    local = '{0}/logos/*.*'.format(localdir)
    try:
        pipe = subprocess.Popen( ['scp {0} {1}'.format(local, remote_logos)], env=env, shell=True)
        pipe.wait()
    except OSError as e:
        print('copy_html WARNING: scp command failed with error::')
        print('    {0} - {1}'.format(e.errno, e.strerror))



#=======================================================================
# main
#=======================================================================
def main(options):
    """ main

    Arguments:
    options (list) - input options from command line
    """
    env = dict()
    envFileList = list()
    compList = ['atm','ice','lnd','ocn']
    activeList = list()

    # define diag dir mapping
    comp_lookup = {'atm' : {'model_vs_obs':'ATMDIAG_WEBDIR_MODEL_VS_OBS', 'model_vs_model':'ATMDIAG_WEBDIR_MODEL_VS_MODEL'},
                   'ice' : {'model_vs_obs':'ICEDIAG_WEBDIR_MODEL_VS_OBS', 'model_vs_model':'ICEDIAG_WEBDIR_MODEL_VS_MODEL'},
                   'lnd' : {'model_vs_obs':'LNDDIAG_WEBDIR_MODEL_VS_OBS', 'model_vs_model':'LNDDIAG_WEBDIR_MODEL_VS_MODEL'},
                   'ocn' : {'model_webdir':'OCNDIAG_WEBDIR'}}

    # this script always run from the postprocessing caseroot 
    pp_caseroot = os.getcwd()

    # initialize the env from the env*.xml files in the casedir
    envFileList.append('env_postprocess.xml')
    for comp in compList:
        envFile = 'env_diags_{0}.xml'.format(comp)
        envFileList.append(envFile)

    # load the env with all the env file entries
    env = cesmEnvLib.readXML(pp_caseroot, envFileList)

    # check if sshkey is set
    check_ssh_key(env)

    # copy the different diag component web files
    for comp in compList:
        key = 'GENERATE_DIAGS_{0}'.format(comp).upper()

        if env[key].upper() in ['T','TRUE'] :
            # create the toplevel remote directory if it doesn't already exist
            create_top_level(env, comp)
            comp_data = comp_lookup[comp]
            # read the web_dirs files to get the paths
            env = read_paths(env, comp_data)
            copy_files(env, comp, comp_data)
            activeList.append(comp)    

    # build a single web page to link to all the different components
    create_index(env, compList, activeList, comp_lookup)

#===================================

if __name__ == "__main__":
    options = commandline_options()
    try:
        status = main(options)
        sys.exit(status)
    except Exception as error:
        print(str(error))
        if options.backtrace:
            traceback.print_exc()
        sys.exit(1)
